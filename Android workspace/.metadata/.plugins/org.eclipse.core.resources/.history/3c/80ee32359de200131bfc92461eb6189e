package inClassAssignment1;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Set;
import java.util.TreeSet;

/*
a. Assignment 1
b. PartOne.java
c. Evodie Kayembe and Eric Bowers.

*/
package blah

/**
 * The Class PartOne.
 */
public class PartOne {

	/** The all records. */
	private final LinkedList<User> allRecords;

	/** The repeated records. */
	private final HashSet<User> repeatedRecords;

	/**
	 * Instantiates a new part one.
	 */
	public PartOne(){
		allRecords = new LinkedList<User>();
		repeatedRecords = new HashSet<User>();
	}

	/**
	 * Gets the repeated records.
	 *
	 * @return the repeated records
	 */
	public HashSet<User> getRepeatedRecords(){
		return repeatedRecords;
	}

	/**
	 * Read file at path.
	 *
	 * @param filename the filename
	 */
	public void readFileAtPath(String filename) {
		// Lets make sure the file path is not empty or null
		if (filename == null || filename.isEmpty()) {
			System.out.println("Invalid File Path");
			return;
		}
		String filePath = System.getProperty("user.dir") + "/" + filename;
		BufferedReader inputStream = null;
		// We need a try catch block so we can handle any potential IO errors
		try {
			try {
				inputStream = new BufferedReader(new FileReader(filePath));
				String lineContent = null;
				// Loop will iterate over each line within the file.
				// It will stop when no new lines are found.
				System.out.println("Reading from file... Please wait...");

				while ((lineContent = inputStream.readLine()) != null) {
					if (allRecords.contains(new User(lineContent))){
						repeatedRecords.add(new User(lineContent));
					}
					else{
						allRecords.add(new User(lineContent));
					}
				}
				System.out.println("Finished Reading.");
			}
			// Make sure we close the buffered reader.
			finally {
				if (inputStream != null)
					inputStream.close();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}// end of method

   /**
    * The main method.
    *
    * @param args the arguments
    */
   public static void main(String[] args) {
	   PartOne run = new PartOne();
	   run.readFileAtPath("userList1.txt"); //read from the file and find repeated records

	   HashSet<User> repeatedUserRecords = run.getRepeatedRecords(); //get repeated user records
	   Iterator<User> itr = repeatedUserRecords.iterator();
	   System.out.println();
	   System.out.println("Here are all the repeated records in the file: ");
	   System.out.println();

	   while(itr.hasNext()){
		   User u = itr.next();
		   System.out.println(u.userInfo());
	   }

	   //convert a the repeated record HashSet to a TreeSet containing the same record
	   Set<User> repeatedUserRecordsAsTreeSet = new TreeSet<User>(new UserComparator());
	   repeatedUserRecordsAsTreeSet.addAll(repeatedUserRecords);

	   Iterator<User> itr2 = repeatedUserRecordsAsTreeSet.iterator(); //iterator to iterate over the new TreeSet

	   System.out.println();
	   System.out.println("Here are all the repeated records in the file in ascending order by last name: ");
	   System.out.println();

	   while(itr2.hasNext()){
		   User user = itr2.next();
		   System.out.println(user.userInfo());
	   }


   }
}
